module.exports={async create(pool){
await pool.query('CREATE EXTENSION IF NOT EXISTS "pgcrypto";');
await pool.query(`CREATE OR REPLACE FUNCTION to_base36_upper(n BIGINT) RETURNS TEXT AS $$DECLARE c TEXT:='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';r TEXT:='';x BIGINT:=n;BEGIN IF x=0 THEN RETURN '0';END IF;WHILE x>0 LOOP r:=substr(c,((x%36)::INT)+1,1)||r;x:=x/36;END LOOP;RETURN r;END;$$ LANGUAGE plpgsql IMMUTABLE;`);
await pool.query(`CREATE TABLE IF NOT EXISTS sales(id SERIAL PRIMARY KEY,public_id TEXT GENERATED ALWAYS AS (to_base36_upper(id)) STORED,CONSTRAINT uq_sales_public_id UNIQUE(public_id),seller_user_id TEXT NOT NULL,customer_user_id TEXT NOT NULL DEFAULT 'anonymous',card_payment_amount NUMERIC(12,2) DEFAULT 0,card_payment_reference TEXT,cash_payment_amount NUMERIC(12,2) DEFAULT 0,qr_payment_amount NUMERIC(12,2) DEFAULT 0,qr_payment_reference TEXT,loyalty_claimed_amount NUMERIC(12,2) DEFAULT 0,loyalty_reference TEXT,total_paid_amount NUMERIC(12,2) DEFAULT 0,total_offer_discount NUMERIC(12,2) DEFAULT 0,total_amount NUMERIC(12,2) DEFAULT 0,status TEXT NOT NULL CHECK(status IN('sold','processing','paused','cancelled')) DEFAULT 'processing',payment_method TEXT,created_at TIMESTAMP DEFAULT NOW(),updated_at TIMESTAMP DEFAULT NOW());`);
await pool.query(`CREATE TABLE IF NOT EXISTS sale_items(id SERIAL PRIMARY KEY,public_id TEXT GENERATED ALWAYS AS (to_base36_upper(id)) STORED,CONSTRAINT uq_sale_items_public_id UNIQUE(public_id),sale_public_id TEXT NOT NULL,CONSTRAINT fk_sale_items_sale_public FOREIGN KEY(sale_public_id) REFERENCES sales(public_id) ON DELETE CASCADE,item_id UUID NOT NULL,CONSTRAINT fk_sale_items_inventory_item FOREIGN KEY(item_id) REFERENCES inventory_items(id) ON DELETE RESTRICT,quantity INTEGER NOT NULL CHECK(quantity>0),unit_price NUMERIC(12,2) NOT NULL,total_price NUMERIC(12,2) NOT NULL,created_at TIMESTAMP DEFAULT NOW());`);
await pool.query(`CREATE TABLE IF NOT EXISTS sale_offers(id SERIAL PRIMARY KEY,public_id TEXT GENERATED ALWAYS AS (to_base36_upper(id)) STORED,CONSTRAINT uq_sale_offers_public_id UNIQUE(public_id),sale_public_id TEXT NOT NULL,CONSTRAINT fk_sale_offers_sale_public FOREIGN KEY(sale_public_id) REFERENCES sales(public_id) ON DELETE CASCADE,offer_code TEXT NOT NULL,offer_description TEXT,discount_amount NUMERIC(12,2) NOT NULL DEFAULT 0,created_at TIMESTAMP DEFAULT NOW());`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sales_created_at ON sales(created_at);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sales_seller ON sales(seller_user_id);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sales_customer ON sales(customer_user_id);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sales_public_id ON sales(public_id);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sale_items_item_id ON sale_items(item_id);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sale_items_sale_public_id ON sale_items(sale_public_id);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sale_offers_sale_public_id ON sale_offers(sale_public_id);`);
await pool.query(`CREATE INDEX IF NOT EXISTS idx_sale_offers_offer_code ON sale_offers(offer_code);`);
}};
